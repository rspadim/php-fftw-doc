<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 331220 $ -->

<appendix xml:id="fftw.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  
  <variablelist xml:id="constants.fftw">
   <title>FFTW Lib</title>
   <varlistentry xml:id="constant.fftw-version">
    <term>
     <constant>FFTW_VERSION</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      FFTW Lib version number.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  
  <variablelist xml:id="constants.fftw-sign">
   <title>FFTW Sign constants</title>
   <varlistentry xml:id="constant.fftw-sign-forward">
    <term>
     <constant>FFTW_FORWARD</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      Is the sign of the exponent in the formula that defines the Fourier transform.
      It can be forward (-1) or backward (1; aka "inverse fft").
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-sign-backward">
    <term>
     <constant>FFTW_BACKWARD</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <simpara>
      Is the sign of the exponent in the formula that defines the Fourier transform.
      It can be forward (-1) or backward (1; aka "inverse fft").
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  
  <variablelist xml:id="constants.fftw-restriction">
   <title>Algorithm-restriction flags</title>
   <varlistentry xml:id="constant.fftw-restriction-destroy">
    <term>
     <constant>FFTW_DESTROY_INPUT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that an out-of-place transform is allowed to overwrite its input array with arbitrary data; 
      this can sometimes allow more efficient algorithms to be employed.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-restriction-preserve">
    <term>
     <constant>FFTW_PRESERVE_INPUT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that an out-of-place transform must not change its input array. This is ordinarily the default, 
      except for c2r and hc2r (i.e. complex-to-real) transforms for which FFTW_DESTROY_INPUT is the default. 
      In the latter cases, passing FFTW_PRESERVE_INPUT will attempt to use algorithms that do not destroy the 
      input, at the expense of worse performance; for multi-dimensional c2r transforms, however, no 
      input-preserving algorithms are implemented and the planner will return NULL if one is requested.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-restriction-unaligned">
    <term>
     <constant>FFTW_UNALIGNED</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that the algorithm may not impose any unusual alignment requirements on the input/output arrays 
      (i.e. no SIMD may be used). This flag is normally not necessary, since the planner automatically detects 
      misaligned arrays. The only use for this flag is if you want to use the new-array execute interface to 
      execute a given plan on a different array that may not be aligned like the original. 
      (Using fftw_malloc makes this flag unnecessary even then. You can also use fftw_alignment_of to detect 
      whether two arrays are equivalently aligned.)
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  
  <variablelist xml:id="constants.fftw-plan-flags">
   <title>Planning-rigor flags</title>
   <varlistentry xml:id="constant.fftw-plan-estimate">
    <term>
     <constant>FFTW_ESTIMATE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Specifies that, instead of actual measurements of different algorithms, a simple heuristic is used to pick 
      a (probably sub-optimal) plan quickly. With this flag, the input/output arrays are not overwritten during 
      planning.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-plan-measure">
    <term>
     <constant>FFTW_MEASURE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Tells FFTW to find an optimized plan by actually computing several FFTs and measuring their execution time. 
      Depending on your machine, this can take some time (often a few seconds). FFTW_MEASURE is the default planning 
      option.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-plan-patient">
    <term>
     <constant>FFTW_PATIENT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Is like FFTW_MEASURE, but considers a wider range of algorithms and often produces a “more optimal” plan 
      (especially for large transforms), but at the expense of several times longer planning time (especially 
      for large transforms).
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-plan-exhaustive">
    <term>
     <constant>FFTW_EXHAUSTIVE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Is like FFTW_PATIENT, but considers an even wider range of algorithms, including many that we think are 
      unlikely to be fast, to produce the most optimal plan but with a substantially increased planning time.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.fftw-plan-wisdom-only">
    <term>
     <constant>FFTW_WISDOM_ONLY</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Is a special planning mode in which the plan is only created if wisdom is available for the given problem, 
      and otherwise a NULL plan is returned. This can be combined with other flags, e.g. 
      ‘FFTW_WISDOM_ONLY | FFTW_PATIENT’ creates a plan only if wisdom is available that was created in 
      FFTW_PATIENT or FFTW_EXHAUSTIVE mode. The FFTW_WISDOM_ONLY flag is intended for users who need to 
      detect whether wisdom is available; for example, if wisdom is not available one may wish to allocate 
      new arrays for planning so that user data is not overwritten.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>

  </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
